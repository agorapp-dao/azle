# TODO let's try to get rid of the release/release-candidate branch
# TODO perhaps we can automate deploys somehow...we do not want to trigger
# TODO deploys on main though when just merging in, we want to run our release process manually

# TODO think up a new simpler way to do this, we want to run our tests against npm and the repo but do it all from main if possible

# TODO figure out how the  badge should work now
name: Azle Tests
on:
  # push:
  #   branches:
  #     - main
  pull_request:
jobs:
  basic-integration-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable]
        # TODO perhaps we should start testing on different versions of dfx as well
        include_npm:
          - ${{ github.head_ref.contains('release') }}
        azle_source:
          - npm
          - repo
        exclude:
          - include_npm: false
            azle_source: npm
        example_directories:
          - examples/call_raw
          - examples/complex_types
          - examples/counter
          - examples/cross_canister_calls
          - examples/func_types
          - examples/generators
          - examples/heartbeat
          - examples/ic_api
          - examples/imports
          - examples/init
          - examples/inline_types
          - examples/key_value_store
          - examples/ledger_canister
          - examples/management_canister
          - examples/motoko_examples/calc
          - examples/motoko_examples/counter
          - examples/optional_types
          - examples/pre_and_post_upgrade
          - examples/primitive_types
          - examples/query
          - examples/simple_erc20
          - examples/simple_user_accounts
          - examples/stable_storage
          - examples/tuple_types
          - examples/update
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: DFX_VERSION=0.9.3 sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Rust cache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ matrix.example_directories }}/target
          key: ${{ matrix.example_directories }}-cache
          restore-keys: ${{ matrix.example_directories }}-cache # TODO might need to be more intelligent and hash files here
      - shell: bash -l {0}
        run: npm install
      - if: matrix.azle_source == 'repo'
        shell: bash -l {0}
        run: npm link
      - working-directory: ${{ matrix.example_directories }}
        run: dfx start --clean --background
      - shell: bash -l {0}
        working-directory: ${{ matrix.example_directories }}
        run: npm install
      - if: matrix.azle_source == 'repo'
        shell: bash -l {0}
        working-directory: ${{ matrix.example_directories }}
        run: npm link azle
      - shell: bash -l {0}
        working-directory: ${{ matrix.example_directories }}
        run: npm test