# TODO figure out how the badge should work now

name: Azle Tests
on:
  pull_request:
jobs:
  release-candidate-deploy:
    runs-on: ubuntu-latest
    env:
      GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
    outputs:
      should_run_tests: ${{ steps.should_run_tests.outputs.should_run_tests }}
      example_directories: ${{ steps.example_directories.outputs.example_directories }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.LASTMJS_GITHUB_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: git config --global user.name 'Jordan Last'
      - run: git config --global user.email 'jordan.michael.last@gmail.com'
      - run: git config --global commit.gpgsign true
      - run: echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
      - run: git config --global user.signingkey 0C8D5F108E5C767681F8C0EE4CC856C99F21BDB0
      - id: example_directories
        run: |
          EXAMPLE_DIRECTORIES=$(cat << END
          [
            "examples/generators",
            "examples/heartbeat"
          ]
          END
          )
          EXAMPLE_DIRECTORIES="${EXAMPLE_DIRECTORIES//'%'/'%25'}"
          EXAMPLE_DIRECTORIES="${EXAMPLE_DIRECTORIES//$'\n'/'%0A'}"
          EXAMPLE_DIRECTORIES="${EXAMPLE_DIRECTORIES//$'\r'/'%0D'}"
          echo "::set-output name=example_directories::$EXAMPLE_DIRECTORIES"
      - run: ./publish-github-action.sh ${{ steps.example_directories.outputs.example_directories }}
        # TODO now we need to pass this into the script somehow...hopefully we can access the outputs
      # - run: echo ${{ toJSON(jobs.basic-integration-tests.strategy.matrix.example_directories) }}
      # - id: should_run_tests
        # run: BRANCH_NAME="${{ github.head_ref }}" && RELEASE_VERSION="${BRANCH_NAME:9}" && COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s") && if [[ "${{ contains(github.head_ref, 'release--') }}" == "true" && "$COMMIT_MESSAGE" != "azle-bot automated release $RELEASE_VERSION" ]]; then ./publish-github-action.sh $RELEASE_VERSION; else echo "::set-output name=should_run_tests::true"; fi
  basic-integration-tests:
    needs: release-candidate-deploy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable]
        # TODO perhaps we should start testing on different versions of dfx as well
        include_npm:
          - ${{ contains(github.head_ref, 'release--') }}
        azle_source:
          - npm
          - repo
        exclude:
          - include_npm: false
            azle_source: npm

        # TODO we can probably put all of the directories in one place and pass them into the script
        example_directories: ${{ fromJson(needs.release-candidate-deploy.outputs.example_directories) }}
          # - examples/call_raw
          # - examples/complex_types
          # - examples/counter
          # - examples/cross_canister_calls
          # - examples/func_types
          # - examples/generators
          # - examples/heartbeat
          # - examples/ic_api
          # - examples/imports
          # - examples/init
          # - examples/inline_types
          # - examples/key_value_store
          # - examples/ledger_canister
          # - examples/management_canister
          # - examples/motoko_examples/calc
          # - examples/motoko_examples/counter
          # - examples/motoko_examples/quicksort
          # - examples/optional_types
          # - examples/pre_and_post_upgrade
          # - examples/primitive_types
          # - examples/query
          # - examples/simple_erc20
          # - examples/simple_user_accounts
          # - examples/stable_storage
          # - examples/tuple_types
          # - examples/update
    outputs:
      success: ${{ steps.success.outputs.success }}
    steps:
      - run: echo ${{ toJSON(matrix.example_directories) }}
      - if: ${{ needs.release-candidate-deploy.outputs.should_run_tests }}
        uses: actions/checkout@v2
      - if: ${{ needs.release-candidate-deploy.outputs.should_run_tests }}
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - if: ${{ needs.release-candidate-deploy.outputs.should_run_tests }}
        run: DFX_VERSION=0.9.3 sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
      - if: ${{ needs.release-candidate-deploy.outputs.should_run_tests }}
        name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - if: ${{ needs.release-candidate-deploy.outputs.should_run_tests }}
        name: Rust cache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ matrix.example_directories }}/target
          key: ${{ matrix.example_directories }}-cache
          restore-keys: ${{ matrix.example_directories }}-cache # TODO might need to be more intelligent and hash files here
      - if: ${{ needs.release-candidate-deploy.outputs.should_run_tests }}
        shell: bash -l {0}
        run: npm install
      - if: ${{ needs.release-candidate-deploy.outputs.should_run_tests && matrix.azle_source == 'repo' }}
        shell: bash -l {0}
        run: npm link
      - if: ${{ needs.release-candidate-deploy.outputs.should_run_tests }}
        working-directory: ${{ matrix.example_directories }}
        run: dfx start --clean --background
      - if: ${{ needs.release-candidate-deploy.outputs.should_run_tests }}
        shell: bash -l {0}
        working-directory: ${{ matrix.example_directories }}
        run: npm install
      - if: ${{ needs.release-candidate-deploy.outputs.should_run_tests && matrix.azle_source == 'repo' }}
        shell: bash -l {0}
        working-directory: ${{ matrix.example_directories }}
        run: npm link azle
      - if: ${{ needs.release-candidate-deploy.outputs.should_run_tests }}
        shell: bash -l {0}
        working-directory: ${{ matrix.example_directories }}
        run: npm test
      - id: success
        run: echo "::set-output name=success::true"
  check-basic-integration-tests:
    needs: basic-integration-tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - run: if [[ "${{ needs.basic-integration-tests.outputs.success }}" == "true" ]]; then exit 0; else exit 1; fi