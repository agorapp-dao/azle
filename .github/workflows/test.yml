# TODO figure out how the  badge should work now
name: Azle Tests
on:
  pull_request:
jobs:
  release-candidate-deploy:
    runs-on: ubuntu-latest
    env:
      GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
    if: ${{ contains(github.head_ref, 'release--') }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
      - run: if [[ "${{needs.basic-integration-tests.outputs.success}}" == "true" ]]; then exit 0; else exit 1; fi
      - run: git config --global user.name 'Jordan Last'
      - run: git config --global user.email 'jordan.michael.last@gmail.com'
      - run: git config --global commit.gpgsign true
      - run: echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
      - run: git config --global user.signingkey 0C8D5F108E5C767681F8C0EE4CC856C99F21BDB0
      - run: BRANCH_NAME="${{ github.head_ref }}" && ./publish-github-action.sh "${BRANCH_NAME:9}"
  basic-integration-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable]
        # TODO perhaps we should start testing on different versions of dfx as well
        include_npm:
          - ${{ contains(github.head_ref, 'release--') }}
        azle_source:
          - npm
          - repo
        exclude:
          - include_npm: false
            azle_source: npm
        example_directories:
          # - examples/call_raw
          # - examples/complex_types
          # - examples/counter
          # - examples/cross_canister_calls
          # - examples/func_types
          - examples/generators
          # - examples/heartbeat
          # - examples/ic_api
          # - examples/imports
          # - examples/init
          # - examples/inline_types
          # - examples/key_value_store
          # - examples/ledger_canister
          # - examples/management_canister
          # - examples/motoko_examples/calc
          # - examples/motoko_examples/counter
          # - examples/motoko_examples/quicksort
          # - examples/optional_types
          # - examples/pre_and_post_upgrade
          # - examples/primitive_types
          # - examples/query
          # - examples/simple_erc20
          # - examples/simple_user_accounts
          # - examples/stable_storage
          # - examples/tuple_types
          # - examples/update
    outputs:
      success: ${{ steps.success.outputs.success }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: DFX_VERSION=0.9.3 sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Rust cache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ matrix.example_directories }}/target
          key: ${{ matrix.example_directories }}-cache
          restore-keys: ${{ matrix.example_directories }}-cache # TODO might need to be more intelligent and hash files here
      # - shell: bash -l {0}
      #   run: npm install
      # - if: matrix.azle_source == 'repo'
      #   shell: bash -l {0}
      #   run: npm link
      # - working-directory: ${{ matrix.example_directories }}
      #   run: dfx start --clean --background
      # - shell: bash -l {0}
      #   working-directory: ${{ matrix.example_directories }}
      #   run: npm install
      # - if: matrix.azle_source == 'repo'
      #   shell: bash -l {0}
      #   working-directory: ${{ matrix.example_directories }}
      #   run: npm link azle
      # - shell: bash -l {0}
      #   working-directory: ${{ matrix.example_directories }}
      #   run: npm test
      - id: success
        run: echo "::set-output name=success::true"
  # TODO in this needs job we should be able to publish the real version automatically if all previous tests pass??
  # TODO so if basic-integration-tests all pass, then we can take the rc.x version and cut that part off and release the true version
  # TODO we would want to run the release code and everything, and have that trigger another test
  # TODO then once that passes, we're code and can manually merge the branch
  # TODO we probably want the entire release process automated based just off of the branch naming convention

  # TODO it's when I do the pull request that I want to publish...publish the release first, then the actual version after if it all works
  check-basic-integration-tests:
    needs: basic-integration-tests
    runs-on: ubuntu-latest
    env:
      GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
    if: always()
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
      - run: if [[ "${{needs.basic-integration-tests.outputs.success}}" == "true" ]]; then exit 0; else exit 1; fi
      # - run: git config --global user.name 'Jordan Last'
      # - run: git config --global user.email 'jordan.michael.last@gmail.com'
      # - run: git config --global commit.gpgsign true
      # - run: echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
      # - run: git config --global user.signingkey 0C8D5F108E5C767681F8C0EE4CC856C99F21BDB0
      # - run: BRANCH_NAME="${{ github.head_ref }}" && ./publish-github-action.sh "${BRANCH_NAME:9}"
  # TODO if this check passes then have another job to do the full release

  # TODO if they succeeded and we are on a release branch, we want to do the release process
  # TODO basically we need to get our npm credentials into GitHub actions
  # TODO then we need to call the publish script appropriately