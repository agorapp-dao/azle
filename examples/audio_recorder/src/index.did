type InsertError = variant {
  ValueTooLarge : KeyTooLarge;
  KeyTooLarge : KeyTooLarge;
};
type KeyTooLarge = record { max : nat32; given : nat32 };
type Recording = record {
  id : principal;
  audio : vec nat8;
  userId : principal;
  name : text;
  createdAt : nat64;
};
type User = record {
  id : principal;
  username : text;
  recordingIds : vec principal;
  createdAt : nat64;
};
type _InlineCreateRecordingReturnType = variant {
  Ok : Recording;
  Err : _InlineCreateRecordingReturnTypeErr;
};
type _InlineCreateRecordingReturnTypeErr = variant {
  InsertError : InsertError;
  UserDoesNotExist : principal;
};
type _InlineCreateUserReturnType = variant { Ok : User; Err : InsertError };
type _InlineDeleteRecordingReturnType = variant {
  Ok : Recording;
  Err : _InlineDeleteRecordingReturnTypeErr;
};
type _InlineDeleteRecordingReturnTypeErr = variant {
  RecordingDoesNotExist : principal;
  InsertError : InsertError;
  UserDoesNotExist : principal;
};
type _InlineDeleteUserReturnType = variant {
  Ok : User;
  Err : _InlineDeleteUserReturnTypeErr;
};
type _InlineDeleteUserReturnTypeErr = variant { UserDoesNotExist : principal };
service : () -> {
  createRecording : (vec nat8, text, principal) -> (
      _InlineCreateRecordingReturnType,
    );
  createUser : (text) -> (_InlineCreateUserReturnType);
  deleteRecording : (principal) -> (_InlineDeleteRecordingReturnType);
  deleteUser : (principal) -> (_InlineDeleteUserReturnType);
  readRecordingById : (principal) -> (opt Recording) query;
  readRecordings : () -> (vec Recording) query;
  readUserById : (principal) -> (opt User) query;
  readUsers : () -> (vec User) query;
}