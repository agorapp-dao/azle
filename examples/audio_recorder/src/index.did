type InsertError = variant {
  ValueTooLarge : KeyTooLarge;
  KeyTooLarge : KeyTooLarge;
};
type KeyTooLarge = record { max : nat32; given : nat32 };
type Recording = record {
  id : principal;
  audio : vec nat8;
  name : text;
  created_at : nat64;
  user_id : principal;
};
type User = record {
  id : principal;
  recording_ids : vec principal;
  username : text;
  created_at : nat64;
};
type _InlineCreateRecordingReturnType = variant {
  ok : Recording;
  err : _InlineCreateRecordingReturnTypeErr;
};
type _InlineCreateRecordingReturnTypeErr = variant {
  InsertError : InsertError;
  UserDoesNotExist : principal;
};
type _InlineCreateUserReturnType = variant { ok : User; err : InsertError };
type _InlineDeleteRecordingReturnType = variant {
  ok : Recording;
  err : _InlineDeleteRecordingReturnTypeErr;
};
type _InlineDeleteRecordingReturnTypeErr = variant {
  RecordingDoesNotExist : principal;
  InsertError : InsertError;
  UserDoesNotExist : principal;
};
type _InlineDeleteUserReturnType = variant {
  ok : User;
  err : _InlineDeleteUserReturnTypeErr;
};
type _InlineDeleteUserReturnTypeErr = variant { UserDoesNotExist : principal };
service : () -> {
  create_recording : (vec nat8, text, principal) -> (
      _InlineCreateRecordingReturnType,
    );
  create_user : (text) -> (_InlineCreateUserReturnType);
  delete_recording : (principal) -> (_InlineDeleteRecordingReturnType);
  delete_user : (principal) -> (_InlineDeleteUserReturnType);
  read_recording_by_id : (principal) -> (opt Recording) query;
  read_recordings : () -> (vec Recording) query;
  read_user_by_id : (principal) -> (opt User) query;
  read_users : () -> (vec User) query;
}