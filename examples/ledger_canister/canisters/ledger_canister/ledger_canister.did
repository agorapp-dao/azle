type Archive = record { canister_id : principal };
type Archives = record { archives : vec Archive };
type AzleInline10264613986238895452 = record {
  error_message : text;
  error_code : nat64;
};
type AzleInline11337173102393622684 = record {
  requested_index : nat64;
  first_valid_index : nat64;
};
type AzleInline11400395396803773476 = record { expected_fee : Tokens };
type AzleInline11544776006446685702 = record { duplicate_of : nat64 };
type AzleInline15223081634657443977 = record { to : vec nat8; amount : Tokens };
type AzleInline7118354651695389022 = record {
  to : vec nat8;
  fee : Tokens;
  from : vec nat8;
  amount : Tokens;
};
type AzleInline7687572629061102026 = record {
  callback : func (GetBlocksArgs) -> (
      variant { Ok : BlockRange; Err : QueryArchiveError },
    ) query;
  start : nat64;
  length : nat64;
};
type AzleInline859989293121108897 = record { from : vec nat8; amount : Tokens };
type AzleInline954623841481393940 = record { balance : Tokens };
type AzleInline9864833564439646029 = record { allowed_window_nanos : nat64 };
type Block = record {
  transaction : Transaction;
  timestamp : TimeStamp;
  parent_hash : opt vec nat8;
};
type BlockRange = record { blocks : vec Block };
type GetBlocksArgs = record { start : nat64; length : nat64 };
type ManualReply = variant { ok : TransferResult; err : text };
type ManualReply_1 = variant { ok : Tokens; err : text };
type ManualReply_2 = variant { ok : Archives; err : text };
type ManualReply_3 = variant { ok : QueryBlocksResponse; err : text };
type ManualReply_4 = variant { ok : nat32; err : text };
type ManualReply_5 = variant { ok : text; err : text };
type ManualReply_6 = variant { ok : TransferFee; err : text };
type Operation = variant {
  Burn : AzleInline859989293121108897;
  Mint : AzleInline15223081634657443977;
  Transfer : AzleInline7118354651695389022;
};
type QueryArchiveError = variant {
  BadFirstBlockIndex : AzleInline11337173102393622684;
  Other : AzleInline10264613986238895452;
};
type QueryBlocksResponse = record {
  certificate : opt vec nat8;
  blocks : vec Block;
  chain_length : nat64;
  first_block_index : nat64;
  archived_blocks : vec AzleInline7687572629061102026;
};
type TimeStamp = record { timestamp_nanos : nat64 };
type Tokens = record { e8s : nat64 };
type Transaction = record {
  memo : nat64;
  operation : opt Operation;
  created_at_time : TimeStamp;
};
type TransferError = variant {
  TxTooOld : AzleInline9864833564439646029;
  BadFee : AzleInline11400395396803773476;
  TxDuplicate : AzleInline11544776006446685702;
  TxCreatedInFuture;
  InsufficientFunds : AzleInline954623841481393940;
};
type TransferFee = record { transfer_fee : Tokens };
type TransferResult = variant { Ok : nat64; Err : TransferError };
service : () -> {
  execute_transfer : (text, nat64, nat64, opt nat64) -> (ManualReply);
  get_account_balance : (text) -> (ManualReply_1);
  get_address_from_principal : (principal) -> (text) query;
  get_archives : () -> (ManualReply_2);
  get_blocks : (GetBlocksArgs) -> (ManualReply_3);
  get_decimals : () -> (ManualReply_4);
  get_name : () -> (ManualReply_5);
  get_symbol : () -> (ManualReply_5);
  get_transfer_fee : () -> (ManualReply_6);
}