type CreateCanisterArgs = record {
    "settings": opt CanisterSettings;
};

type UpdateSettingsArgs = record {
    "canister_id": principal;
    "settings": CanisterSettings;
};

type InstallCodeArgs = record {
    "mode": InstallCodeMode;
    "canister_id": principal;
    "wasm_module": blob;
    "arg": blob;
};

type UninstallCodeArgs = record {
    "canister_id": principal;
};

type StartCanisterArgs = record {
    "canister_id": principal;
};

type StopCanisterArgs = record {
    "canister_id": principal;
};

type CanisterStatusArgs = record {
    "canister_id": principal;
};

type DeleteCanisterArgs = record {
    "canister_id": principal;
};

type DepositCyclesArgs = record {
    "canister_id": principal;
};

type HttpRequestArgs = record {
    "url": text;
    "max_response_bytes": opt nat64;
    "http_method": HttpMethod;
    "headers": vec HttpHeader;
    "body": opt blob;
    "transform_method_name": opt text;
};

type ProvisionalCreateCanisterWithCyclesArgs = record {
    "amount": opt nat;
    "settings": opt CanisterSettings;
};

type ProvisionalTopUpCanisterArgs = record {
    "canister_id": principal;
    "amount": nat;
};

type EcdsaPublicKeyArgs = record {
    "canister_id": opt principal;
    "derivation_path": vec blob;
    "key_id": KeyId;
};

type SignWithEcdsaArgs = record {
    "message_hash": blob;
    "derivation_path": vec blob;
    "key_id": KeyId;
};

type CreateCanisterResult = record {
    "canister_id": principal;
};

type CanisterStatusResult = record {
    "status": CanisterStatus;
    "settings": DefiniteCanisterSettings;
    "module_hash": opt blob;
    "memory_size": nat;
    "cycles": nat;
};

type HttpResponse = record {
    "status": nat64;
    "headers": vec HttpHeader;
    "body": blob;
};

type ProvisionalCreateCanisterWithCyclesResult = record {
    "canister_id": principal;
};

type EcdsaPublicKeyResult = record {
    "public_key": blob;
    "chain_code": blob;
};

type SignWithEcdsaResult = record {
    "signature": blob;
};

type CanisterSettings = record {
    "controllers": opt vec principal;
    "compute_allocation": opt nat;
    "memory_allocation": opt nat;
    "freezing_threshold": opt nat;
};

type HttpHeader = record {
    "name": text;
    "value": text;
};

type KeyId = record {
    "curve": EcdsaCurve;
    "name": text;
};

type DefiniteCanisterSettings = record {
    "controllers": vec principal;
    "compute_allocation": nat;
    "memory_allocation": nat;
    "freezing_threshold": nat;
};

type PublicKeyResult = variant { "ok": record { "public_key": blob; }; "err": text };

type SignResult = variant { "ok": record { "signature": blob; }; "err": text };

type InstallCodeMode = variant { "install": null; "reinstall": null; "upgrade": null };

type HttpMethod = variant { "GET": null; "HEAD": null; "POST": null };

type EcdsaCurve = variant { "secp256k1": null };

type CanisterStatus = variant { "running": null; "stopping": null; "stopped": null };

service: {
    "public_key": () -> (PublicKeyResult);
    "sign": (blob) -> (SignResult);
}
