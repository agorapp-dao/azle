type AzleInline13816623851176430973 = variant {
  v1;
  v2;
  v3 : AzleInline572753878365893609;
};
type AzleInline14278949523830781263 = record {
  "variant" : AzleInline6816196663154001218;
};
type AzleInline14966556152636491851 = variant { var1; var2; var3 };
type AzleInline15340837539329043558 = variant { prop1 : Test };
type AzleInline15527213364506807559 = variant { var1; var2 : TestVariant };
type AzleInline16000916309646445968 = record { id : text; title : text };
type AzleInline16183997797319575340 = record {
  prop1 : opt text;
  prop2 : AzleInline6816196663154001218;
  prop3 : opt AzleInline6445785063551525205;
};
type AzleInline17567703860528056356 = record { prop1 : text; prop2 : text };
type AzleInline17907358301909446383 = record {
  "opt" : opt text;
  "vec" : vec text;
  primitive : nat;
  "func" : func () -> (text);
  "variant" : AzleInline9241933921164265557;
  "record" : AzleInline572753878365893609;
};
type AzleInline2410635511336064075 = variant {
  ok : opt AzleInline3584559204500599042;
  err : InsertError;
};
type AzleInline331011266626255843 = record {
  "opt" : opt AzleInline3438017788659025238;
  "vec" : vec AzleInline3438017788659025238;
  primitive : text;
  "func" : func () -> (
      record { prop1 : text; "variant" : AzleInline8104859290855916193 },
    ) query;
  "variant" : AzleInline3855657635693226142;
  "record" : AzleInline9515936859421571254;
};
type AzleInline3438017788659025238 = record {
  "opt" : opt text;
  "vec" : vec text;
  primitive : nat;
  "func" : func () -> (text);
  "variant" : AzleInline9241933921164265557;
  "record" : AzleInline572753878365893609;
};
type AzleInline3570239491935533154 = record { testVariant : TestVariant };
type AzleInline3584559204500599042 = record {
  "variant" : AzleInline733321614567558724;
};
type AzleInline3602308432785958051 = record { prop1 : text; prop2 : Thing };
type AzleInline3855657635693226142 = variant {
  v1;
  v2;
  v3 : AzleInline572753878365893609;
};
type AzleInline5052124789438212370 = variant { prop1 : UserVariant };
type AzleInline5715647345171371725 = record { test : Test };
type AzleInline572753878365893609 = record { prop1 : text };
type AzleInline637595233572856709 = variant { var1; var2 };
type AzleInline6445785063551525205 = record { prop1 : nat };
type AzleInline6816196663154001218 = variant { var1; var2 : TestVariant };
type AzleInline733321614567558724 = variant { var1; var2 : TestVariant };
type AzleInline8104859290855916193 = variant {
  v1;
  v2 : AzleInline572753878365893609;
};
type AzleInline9241933921164265557 = variant { v1; v2 };
type AzleInline9515936859421571254 = record {
  optional : opt nat64;
  prop1 : text;
  "variant" : AzleInline9241933921164265557;
};
type InsertError = variant {
  ValueTooLarge : KeyTooLarge;
  KeyTooLarge : KeyTooLarge;
};
type KeyTooLarge = record { max : nat32; given : nat32 };
type ManualReply = variant { ok : AzleInline17567703860528056356; err : text };
type Reaction = variant { one; two; three : Test };
type Test = record { id : text };
type TestVariant = variant { prop1 : text; prop2 : Test };
type Thing = record { id : text };
type User1 = record { id : text; job : AzleInline16000916309646445968 };
type UserVariant = variant { prop1 };
service : () -> {
  complex : (AzleInline331011266626255843) -> (
      AzleInline331011266626255843,
    ) query;
  inline_func : (
      func (
          text,
          opt AzleInline3438017788659025238,
          vec AzleInline3438017788659025238,
          AzleInline9515936859421571254,
          AzleInline3855657635693226142,
          func () -> (
              record {
                prop1 : text;
                "variant" : AzleInline8104859290855916193;
              },
            ) query,
        ) -> () query,
    ) -> (
      func (
          text,
          opt AzleInline3438017788659025238,
          vec AzleInline3438017788659025238,
          AzleInline9515936859421571254,
          AzleInline3855657635693226142,
          func () -> (
              record {
                prop1 : text;
                "variant" : AzleInline8104859290855916193;
              },
            ) query,
        ) -> () query,
    ) query;
  inline_record_param : (AzleInline572753878365893609) -> (text) query;
  inline_record_return_type : () -> (AzleInline17567703860528056356) query;
  inline_record_return_type_as_external_canister_call : () -> (ManualReply);
  inline_variant_param : (AzleInline637595233572856709) -> (
      AzleInline637595233572856709,
    ) query;
  inline_variant_return_type : () -> (AzleInline14966556152636491851) query;
  record_referencing_other_types_from_return_type : () -> (
      AzleInline3602308432785958051,
    ) query;
  record_referencing_record_from_param : (AzleInline5715647345171371725) -> (
      text,
    ) query;
  record_referencing_variant_from_param : (AzleInline3570239491935533154) -> (
      opt text,
    ) query;
  record_with_inline_fields : () -> (User1) query;
  stable_map_get : (AzleInline16183997797319575340) -> (
      opt AzleInline14278949523830781263,
    ) query;
  stable_map_insert : (
      AzleInline16183997797319575340,
      AzleInline14278949523830781263,
    ) -> (AzleInline2410635511336064075);
  variant_referencing_other_types_from_return_type : () -> (TestVariant) query;
  variant_referencing_record_from_param : (
      AzleInline15340837539329043558,
    ) -> () query;
  variant_referencing_variant_from_param : (
      AzleInline5052124789438212370,
    ) -> () query;
  variant_with_inline_fields : () -> (Reaction) query;
}