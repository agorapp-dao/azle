type BlogPost = record { title : text };
type InsertError = variant {
  ValueTooLarge : KeyTooLarge;
  KeyTooLarge : KeyTooLarge;
};
type KeyTooLarge = record { max : nat32; given : nat32 };
type Reaction = variant { Sad; Happy };
type StableMap0InsertResult = variant { Ok : opt text; Err : InsertError };
type StableMap1InsertResult = variant { Ok : opt vec nat8; Err : InsertError };
type StableMap2InsertResult = variant { Ok : opt nat; Err : InsertError };
type StableMap3InsertResult = variant { Ok : opt int; Err : InsertError };
type StableMap4InsertResult = variant { Ok : opt float32; Err : InsertError };
type User = record { username : text; posts : vec BlogPost };
service : () -> {
  stableMap0ContainsKey : (nat8) -> (bool) query;
  stableMap0Get : (nat8) -> (opt text) query;
  stableMap0Insert : (nat8, text) -> (StableMap0InsertResult);
  stableMap0IsEmpty : () -> (bool) query;
  stableMap0Items : () -> (vec record { nat8; text }) query;
  stableMap0Keys : () -> (vec nat8) query;
  stableMap0Len : () -> (nat64) query;
  stableMap0Remove : (nat8) -> (opt text);
  stableMap0Values : () -> (vec text) query;
  stableMap1ContainsKey : (nat16) -> (bool) query;
  stableMap1Get : (nat16) -> (opt vec nat8) query;
  stableMap1Insert : (nat16, vec nat8) -> (StableMap1InsertResult);
  stableMap1IsEmpty : () -> (bool) query;
  stableMap1Items : () -> (vec record { nat16; vec nat8 }) query;
  stableMap1Keys : () -> (vec nat16) query;
  stableMap1Len : () -> (nat64) query;
  stableMap1Remove : (nat16) -> (opt vec nat8);
  stableMap1Values : () -> (vec vec nat8) query;
  stableMap2ContainsKey : (nat32) -> (bool) query;
  stableMap2Get : (nat32) -> (opt nat) query;
  stableMap2Insert : (nat32, nat) -> (StableMap2InsertResult);
  stableMap2IsEmpty : () -> (bool) query;
  stableMap2Items : () -> (vec record { nat32; nat }) query;
  stableMap2Keys : () -> (vec nat32) query;
  stableMap2Len : () -> (nat64) query;
  stableMap2Remove : (nat32) -> (opt nat);
  stableMap2Values : () -> (vec nat) query;
  stableMap3ContainsKey : (Reaction) -> (bool) query;
  stableMap3Get : (Reaction) -> (opt int) query;
  stableMap3Insert : (Reaction, int) -> (StableMap3InsertResult);
  stableMap3IsEmpty : () -> (bool) query;
  stableMap3Items : () -> (vec record { Reaction; int }) query;
  stableMap3Keys : () -> (vec Reaction) query;
  stableMap3Len : () -> (nat64) query;
  stableMap3Remove : (Reaction) -> (opt int);
  stableMap3Values : () -> (vec int) query;
  stableMap4ContainsKey : (User) -> (bool) query;
  stableMap4Get : (User) -> (opt float32) query;
  stableMap4Insert : (User, float32) -> (StableMap4InsertResult);
  stableMap4IsEmpty : () -> (bool) query;
  stableMap4Items : () -> (vec record { User; float32 }) query;
  stableMap4Keys : () -> (vec User) query;
  stableMap4Len : () -> (nat64) query;
  stableMap4Remove : (User) -> (opt float32);
  stableMap4Values : () -> (vec float32) query;
}