type User = record {
    "id": text;
    "basic_func": BasicFunc;
    "complex_func": ComplexFunc;
};

type GetNotifierFromNotifiersCanisterResult = variant { "ok": NotifierFunc; "err": text };

type Reaction = variant { "Good": null; "Bad": null; "BasicFunc": BasicFunc; "ComplexFunc": ComplexFunc };

type NotifierFunc = func (blob) -> () query;
type BasicFunc = func (text) -> (text) query;
type ComplexFunc = func (User, Reaction) -> (nat64);
type StableFunc = func (nat64, text) -> () query;

service: () -> {
    "get_stable_func": () -> (StableFunc) query;
    "basic_func_param": (BasicFunc) -> (BasicFunc) query;
    "basic_func_param_array": (vec BasicFunc) -> (vec BasicFunc) query;
    "basic_func_return_type": () -> (BasicFunc) query;
    "basic_func_return_type_array": () -> (vec BasicFunc) query;
    "complex_func_param": (ComplexFunc) -> (ComplexFunc) query;
    "complex_func_return_type": () -> (ComplexFunc) query;
    "get_notifier_from_notifiers_canister": () -> (GetNotifierFromNotifiersCanisterResult);
}
