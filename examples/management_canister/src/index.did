service: () -> {
    executeCreateCanister: () -> (record {canister_id:principal});
    executeDeleteCanister: (principal) -> (bool);
    executeDepositCycles: (principal) -> (bool);
    executeInstallCode: (principal, vec nat8) -> (bool);
    executeStartCanister: (principal) -> (bool);
    executeStopCanister: (principal) -> (bool);
    executeUninstallCode: (principal) -> (bool);
    executeUpdateSettings: (principal) -> (bool);
    getCanisterStatus: (record {canister_id:principal}) -> (record {status:variant {stopped; stopping; running}; memory_size:nat; cycles:nat; settings:record {freezing_threshold:nat; controllers:vec principal; memory_allocation:nat; compute_allocation:nat}; module_hash:opt vec nat8});
    getCreatedCanisterId: () -> (principal) query;
    getRawRand: () -> (vec nat8);
    provisionalCreateCanisterWithCycles: () -> (record {canister_id:principal});
    provisionalTopUpCanister: (principal, nat) -> (bool);
}
