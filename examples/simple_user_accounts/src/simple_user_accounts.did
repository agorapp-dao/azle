service: () -> {
    test: (text, text) -> (text) query;
    simpleQuery: (text, text) -> (text) query;
    echoRecord: (record {myInt:int; myNat32:nat32; myBlob:vec nat8; myBool:bool; myOptBool:opt bool; myText:text; myVecInt:vec int}) -> (record {myInt:int; myNat32:nat32; myBlob:vec nat8; myBool:bool; myOptBool:opt bool; myText:text; myVecInt:vec int}) query;
    echoSimpleRecord: (record {myInt:int}) -> (record {myInt:int}) query;
    echoVariant: (variant {Hot:nat; Cold; Cool; Warm:int}) -> (variant {Hot:nat; Cold; Cool; Warm:int}) query;
    echoFunc: (func (text, text) -> (int) query) -> (func (text, text) -> (int) query) query;
    returnFunc: () -> (func (text, bool) -> (int) ) query;
    returnVoid: () -> () query;
    returnTrap: (text) -> () query;
    returnTime: () -> (nat64) query;
    stableWrite: () -> ();
    stable64Write: () -> ();
    setCertData: () -> ();
    stableBytes: () -> (vec nat8) query;
    stableRead: () -> (vec nat8) query;
    stable64Read: () -> (vec nat8) query;
    stableGrow: () -> (nat32);
    stable64Grow: () -> (nat64);
    stableSize: () -> (nat32);
    stable64Size: () -> (nat64);
    returnInt: () -> (int) query;
}
