pub fn generate_header_code() -> proc_macro2::TokenStream {
    quote::quote! {
        // This code is automatically generated by Azle

        // #![allow(dead_code)]
        // #![allow(non_camel_case_types)]
        // #![allow(non_snake_case)]
        // #![allow(unused_imports)]
        // #![allow(unused_variables)]
        #![allow(warnings, unused)]

        use azle_vm_value_derive::{CdkActTryIntoVmValue, CdkActTryFromVmValue};
        use base32::Alphabet;
        use boa_engine::object::JsObject;
        use ic_cdk::api::call::CallResult;
        use rand::{Rng, rngs::StdRng, SeedableRng};
        use sha2::{Digest, Sha224};
        use slotmap::Key;
        use std::{cell::RefCell, collections::HashMap, str::FromStr};

        struct TimerCallback {
            callback: JsObject,
            timer_id: ic_cdk::timer::TimerId,
        }

        thread_local! {
            static RNG_REF_CELL: RefCell<StdRng> = RefCell::new(SeedableRng::from_seed([0u8;32]));
            static TIMER_CALLBACKS_REF_CELL: RefCell<HashMap<String, TimerCallback>> = RefCell::new(HashMap::new());
            static TIMER_CALLBACK_LOOKUP_REF_CELL: RefCell<HashMap<ic_cdk::timer::TimerId, String>> = RefCell::new(HashMap::new());
        }

        fn _azle_create_uid() -> String {
            RNG_REF_CELL.with(|rng_ref_cell| {
                let mut rng = rng_ref_cell.borrow_mut();
                let random_values: [u8; 32] = rng.gen();
                let mut hasher = Sha224::new();
                hasher.update(random_values);
                let hash = hasher.finalize();
                base32::encode(Alphabet::RFC4648 { padding: false }, &hash)
            })
        }
    }
}
